/**
* @author  Jaya Prakash Manne
* @version 1.0
* @since   23-Jan-2020 
*/
package com.ais.jb.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ais.jb.common.Constants;
import com.ais.jb.common.URLConstants;
import com.ais.jb.dao.model.AuthCodeDetails;
import com.ais.jb.dao.model.EmployerDetails;
import com.ais.jb.dao.model.JobDetails;
import com.ais.jb.dao.model.RoleDetails;
import com.ais.jb.dao.model.UserDetails;
import com.ais.jb.exception.JBoradException;
import com.ais.jb.model.AuthorizationDetails;
import com.ais.jb.model.Response;
import com.ais.jb.repository.EmployerRepository;
import com.ais.jb.repository.JobRepository;
import com.ais.jb.repository.UserRepository;
import com.ais.jb.request.model.PostJobRequest;
import com.ais.jb.request.model.SaveEmployerProfileRequest;
import com.ais.jb.request.model.SearchJobRequest;
import com.ais.jb.response.model.EmployerProfileResponse;
import com.ais.jb.response.model.WebJobSearchDetails;
import com.ais.jb.util.AppUtil;
import com.ais.jb.util.AuthCodeGenerator;
import com.ais.jb.util.PasswordEncy;
import com.ais.jb.util.UniversalUniqueCodeGenerator;
import com.ais.jb.util.ValidationUtil;

@RestController
@RequestMapping(URLConstants.Job.API_BASE)
public class JobController extends BaseController {
	private static final Logger LOGGER = LoggerFactory.getLogger(JobController.class);
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	EmployerRepository employerRepository;
	
	@Autowired
	JobRepository jobRepository;
	
	//=========================================================================
	
	@PostMapping(URLConstants.Job.SAVE_EMPLOYER_PROFILE)
	public ResponseEntity<Response> saveEmployerProfile(@Valid @RequestBody SaveEmployerProfileRequest saveEmployerProfileRequest) throws JBoradException {
		String logTag = "saveEmployerProfile() :";
		LOGGER.info(AppUtil.getStartMethodMessage(logTag));
		Response response = null;
		List<UserDetails> existingUsers = null;
		UserDetails userDetails = null;
		
		try {
			String validationResult = ValidationUtil.getInstance().validateEmployerProfileDetails(saveEmployerProfileRequest);
			if(!Constants.SUCCESS.equalsIgnoreCase(validationResult)) {
				return getInvalidDataResponseEntity(validationResult);
			}
			existingUsers = userRepository.getUserByEmail(saveEmployerProfileRequest.getEmail());
			
			if(existingUsers != null && existingUsers.size() > 0) {
				response = new Response("Email already exists.", null);
			} else {
				userDetails = new UserDetails();
				String password = UniversalUniqueCodeGenerator.getInstance().getAutoGeneratedPassword();
				userDetails.setEmail(saveEmployerProfileRequest.getEmail().toLowerCase());
				userDetails.setPassword(PasswordEncy.getInstance().encrypt(password));
				userDetails.setFirstName(saveEmployerProfileRequest.getName());
				userDetails.setLastName("Employer");
				userDetails.setPhoneNumber(saveEmployerProfileRequest.getPhoneNumber());
				userDetails.setStatus(Constants.ACTIVE);
				userDetails.setCreatedAt(new Date());
				RoleDetails roleDetails = new RoleDetails();
				roleDetails.setRoleId(Constants.EMPLOYER_ROLE);
				userDetails.setRoleDetails(roleDetails);
				userDetails = userRepository.save(userDetails);
				
				if(userDetails.getUserDetailsId() != null) {
					EmployerDetails employerDetails = new EmployerDetails();
					employerDetails.setUserDetails(userDetails);
					employerDetails.setCompanyName(saveEmployerProfileRequest.getCompanyName());
					employerDetails.setCompanySize(saveEmployerProfileRequest.getCompanySize());
					employerDetails.setHowHearAboutUs(saveEmployerProfileRequest.getHowHearAboutUs());
					employerDetails.setRecruiterHiringForClient(saveEmployerProfileRequest.getRecruiterHiringForClient());
					employerDetails = employerRepository.save(employerDetails);
					
					AuthCodeDetails authCodeDetails = new AuthCodeDetails();
					authCodeDetails.setAuthCode(AuthCodeGenerator.getInstance().getGeneratedAuthCode());
					authCodeDetails.setUserDetails(userDetails);
					authCodeDetails.setLoginTime(new Date());
					authCodeDetails.setLogoutTime(new Date());
					authCodeDetails.setStatus(Constants.ACTIVE);
					authCodeDetails = authCodeRepository.save(authCodeDetails);
					
					EmployerProfileResponse candidateProfileResponse = new EmployerProfileResponse();
					candidateProfileResponse.setAuthCode(authCodeDetails.getAuthCode());
					candidateProfileResponse.setName(userDetails.getFirstName());
					candidateProfileResponse.setEmail(userDetails.getEmail());
					candidateProfileResponse.setCompany(employerDetails.getCompanyName());
					candidateProfileResponse.setUserDetailsId(userDetails.getUserDetailsId());
					candidateProfileResponse.setRoleId(userDetails.getRoleDetails().getRoleId()); 
					
					//EmailUtil emailUtil = EmailUtil.getInstance();
					//boolean isMailSent = emailUtil.send(emailUtil.populateCredenitalsMail(userDetails.getFirstName(), "", userDetails.getEmail(), password));
					//LOGGER.info("isMailSent : "+isMailSent);
					response = new Response("Employer Profile saved successfully", candidateProfileResponse);
				}
			}
		} catch (Exception e) {
			String exceptionMessage = logTag + "Exception while saving the employer profile.";
			handleException(LOGGER, logTag, exceptionMessage, e, null);
		}
		LOGGER.info(AppUtil.getEndMethodMessage(logTag));
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}
	
	//=========================================================================
	
	@PostMapping(URLConstants.Job.POST_JOB)
	public ResponseEntity<Response> postJob(@Valid @RequestBody PostJobRequest postJobRequest, @RequestParam("authCode") String authCode) throws JBoradException {
		String logTag = "postJob() :";
		LOGGER.info(AppUtil.getStartMethodMessage(logTag));
		AuthorizationDetails authorizationDetails = null;
		Response response = null;
		UserDetails userDetails = null;
		ValidationUtil validationUtil = null;
		JobDetails jobDetails = null;
		
		try {
			authorizationDetails = validateAuthorization(authCode);
			
			if(authorizationDetails.isValidAuthCode()) {
				if(authorizationDetails.isValidAccess()) {
					validationUtil = ValidationUtil.getInstance();
					userDetails = new UserDetails();
					userDetails.setUserDetailsId(authorizationDetails.getUserDetailsId());
					
					if(postJobRequest != null) {
						String validationResult = validationUtil.validatePostJobDetails(postJobRequest);
						if(Constants.SUCCESS.equalsIgnoreCase(validationResult)) {
							Optional<EmployerDetails> employerDetails = employerRepository.findById(userDetails.getUserDetailsId());
							
							if(employerDetails.isPresent()) {
								jobDetails = new JobDetails();
								jobDetails.setJobTitle(postJobRequest.getJobTitle());
								jobDetails.setCompany(postJobRequest.getCompanyName());
								jobDetails.setCity(postJobRequest.getCity());
								jobDetails.setState(postJobRequest.getState());
								jobDetails.setCountry(postJobRequest.getCountry());
								jobDetails.setJobType(postJobRequest.getJobType());
								jobDetails.setJobCode(UniversalUniqueCodeGenerator.getInstance().getUniqueCode());
								jobDetails.setEmployerDetails(employerDetails.get());
								jobDetails.setSalaryRange(postJobRequest.getSalaryRange());
								jobDetails.setSalaryType(postJobRequest.getSalaryType());
								jobDetails.setHowManyHires(postJobRequest.getHowManyHires());
								jobDetails.setHowUrgentlyRequired(postJobRequest.getHowUrgentlyRequired());
								jobDetails.setAdditionalDetails(postJobRequest.getAdditionalDetails());
								jobDetails.setIndustry(postJobRequest.getIndustry());
								jobDetails.setJobSummary(postJobRequest.getJobSummary());
								jobDetails.setResponsibilitiesAndDuties(postJobRequest.getResponsibilitiesAndDuties());
								jobDetails.setQualificationsAndSkills(postJobRequest.getQualificationsAndSkills());
								jobDetails.setBenefits(postJobRequest.getBenefits());
								
								//Job Application Settings
								jobDetails.setReceiveApplications(postJobRequest.getReceiveApplications());
								if(jobDetails.getReceiveApplications().equalsIgnoreCase("Email")) {
									jobDetails.setEmailAddresses(postJobRequest.getEmailAddresses());
								} else {
									jobDetails.setInpersonAddresses(postJobRequest.getInpersonAddresses());
								}
								jobDetails.setNewApplicatantsInformed(postJobRequest.getNewApplicatantsInformed());
								jobDetails.setSubmitResume(postJobRequest.getSubmitResume());
								
								//Job Application Qualifications
								jobDetails.setNotifyRequired(postJobRequest.getNotifyRequired());
								jobDetails.setExperienceQualification(postJobRequest.getExperienceQualifications());
								jobDetails.setLicenseQualification(postJobRequest.getLanguageQualifications());
								jobDetails.setEducationQualification(postJobRequest.getExperienceQualifications());
								jobDetails.setLocationQualification(postJobRequest.getLocationQualification());
								jobDetails.setShiftAvailabilityQualification(postJobRequest.getShiftAvailabilityQualification());
								jobDetails.setWillingToTravelQualification(postJobRequest.getWillingToTravelQualification());
								jobDetails.setRequiredDocumentsQualification(postJobRequest.getRequiredDocumentsQualification());
								jobDetails.setStartDateQualification(postJobRequest.getStartDateQualification());
								jobDetails.setExpectedCtcQualification(postJobRequest.getExpectedCtcQualification());
								jobDetails.setStatus(Constants.ACTIVE);
								jobDetails.setCreatedAt(new Date());
								jobDetails = jobRepository.save(jobDetails);
							} else {
								LOGGER.info(logTag + "Employer Not Present ");
							}
						} else {
							return getInvalidDataResponseEntity(validationResult);
						}
					}
					
					if(jobDetails.getJobDetailsId() != null && jobDetails.getJobDetailsId().longValue() > 0) {
						response = new Response("Job Post successfully", null);
					} else {
						response = new Response("Job Post unsuccessful", null);
					}
				} else {
					LOGGER.info(logTag + "Unauthorized Access : "+authCode);
					return new ResponseEntity<Response>(getUnAuthorizedAccessRespose(), HttpStatus.UNAUTHORIZED);
				}
			} else {
				response = getInvalidAuthCodeRespose(authCode);
				LOGGER.info(logTag + "Invalid AuthCode : "+authCode);
			}
		} catch (Exception e) {
			String exceptionMessage = logTag + "Exception while building the candidate resume.";
			handleException(LOGGER, logTag, exceptionMessage, e, null);
		}
		LOGGER.info(AppUtil.getEndMethodMessage(logTag));
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}
	
	//=========================================================================
	
	/*@GetMapping(URLConstants.Job.GET_JOB_DETAILS_BY_ID)
	public ResponseEntity<Response> getJobDetails(@RequestParam("authCode") String authCode, @PathVariable(value = "jobDetailsId") Long jobDetailsId) throws JBoradException {
		String logTag = "getJobDetails() :";
		LOGGER.info(AppUtil.getStartMethodMessage(logTag));
		AuthorizationDetails authorizationDetails = null;
		Response response = null;
		
		try {
			authorizationDetails = validateAuthorization(authCode);
			
			if(authorizationDetails.isValidAuthCode()) {
				if(authorizationDetails.isValidAccess()) {
					Optional<JobDetails> optionalJobDetails = jobRepository.findById(jobDetailsId);
					JobDetails jobDetails = null;
					
					if(optionalJobDetails.isPresent()) {
						jobDetails = optionalJobDetails.get();
					}
					
					if(jobDetails != null) {
						response = new Response("Job Details", jobDetails.getWebJobDetails());
					} else {
						response = new Response("No Job Details found for jobDetailsId: "+jobDetailsId, null);
					}
				} else {
					LOGGER.info(logTag + "Unauthorized Access : "+authCode);
					return new ResponseEntity<Response>(getUnAuthorizedAccessRespose(), HttpStatus.UNAUTHORIZED);
				}
			} else {
				response = getInvalidAuthCodeRespose(authCode);
				LOGGER.info(logTag + "Invalid AuthCode : "+authCode);
			}
		} catch (Exception e) {
			String exceptionMessage = logTag + "Exception while retrieving the Jobe details";
			handleException(LOGGER, logTag, exceptionMessage, e, authorizationDetails); 
		}
		LOGGER.info(AppUtil.getEndMethodMessage(logTag));
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}*/

	//=========================================================================
	
	@GetMapping(URLConstants.Job.GET_JOB_DETAILS_BY_JOBCODE)
	public ResponseEntity<Response> getJobDetails(@RequestParam("authCode") String authCode, @PathVariable(value = "jobCode") String jobCode) throws JBoradException {
		String logTag = "getJobDetails() :";
		LOGGER.info(AppUtil.getStartMethodMessage(logTag));
		AuthorizationDetails authorizationDetails = null;
		Response response = null;
		JobDetails jobDetails = null;
		
		try {
			authorizationDetails = validateAuthorization(authCode);
			
			if(authorizationDetails.isValidAuthCode()) {
				if(authorizationDetails.isValidAccess()) {
					List<JobDetails> jobsByJobCode = jobRepository.getJobDetailsByJobCode(jobCode);
					
					if(jobsByJobCode != null && !jobsByJobCode.isEmpty()) {
						jobDetails = jobsByJobCode.get(0);
					}
					
					if(jobDetails != null) {
						response = new Response("Job Details", jobDetails.getWebJobDetails());
					} else {
						response = new Response("No Job Details found for jobCode: "+jobCode, null);
					}
				} else {
					LOGGER.info(logTag + "Unauthorized Access : "+authCode);
					return new ResponseEntity<Response>(getUnAuthorizedAccessRespose(), HttpStatus.UNAUTHORIZED);
				}
			} else {
				response = getInvalidAuthCodeRespose(authCode);
				LOGGER.info(logTag + "Invalid AuthCode : "+authCode);
			}
		} catch (Exception e) {
			String exceptionMessage = logTag + "Exception while retrieving the Jobe details";
			handleException(LOGGER, logTag, exceptionMessage, e, authorizationDetails); 
		}
		LOGGER.info(AppUtil.getEndMethodMessage(logTag));
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}

	//=========================================================================
	
	@GetMapping(URLConstants.Job.GET_EMPLOYEE_BENEFITS)
	public ResponseEntity<Response> getEmployeeBenefits() throws JBoradException {
		String logTag = "getEmployeeBenefits() :";
		LOGGER.info(AppUtil.getStartMethodMessage(logTag));
		Response response = null;
		
		try {
			response = new Response("Employee Benefits", AppUtil.getOptions(Constants.EMPLOYEE_BENEFITS));
		} catch (Exception e) {
			String exceptionMessage = logTag + "Exception while retrieving the Employee Benefits";
			handleException(LOGGER, logTag, exceptionMessage, e, null); 
		}
		LOGGER.info(AppUtil.getEndMethodMessage(logTag));
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}

	//=========================================================================
	
	@GetMapping(URLConstants.Job.GET_JOB_INDUSTRIES)
	public ResponseEntity<Response> getJobIndustries() throws JBoradException {
		String logTag = "getJobIndustries() :";
		LOGGER.info(AppUtil.getStartMethodMessage(logTag));
		Response response = null;
		
		try {
			response = new Response("Job Industries", AppUtil.getOptions(Constants.JOB_INDUSTRIES));
		} catch (Exception e) {
			String exceptionMessage = logTag + "Exception while retrieving the Job Industries";
			handleException(LOGGER, logTag, exceptionMessage, e, null); 
		}
		LOGGER.info(AppUtil.getEndMethodMessage(logTag));
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}
	
	//=========================================================================
	
	@PostMapping(URLConstants.Job.SEARCH_JOB)
	public ResponseEntity<Response> searchJob(@RequestBody SearchJobRequest searchJobRequest,
		@RequestParam(value = "authCode", required = false/* , defaultValue="d_authcode" */) String authCode) throws JBoradException {
		String logTag = "searchJob() :";
		LOGGER.info(AppUtil.getStartMethodMessage(logTag));
		AuthorizationDetails authorizationDetails = null;
		Response response = null;
		List<WebJobSearchDetails> webJobSearchDetailsList = null;
		UserDetails userDetails = null;
		
		try {
			String validationResult = ValidationUtil.getInstance().validateSearchJobDetails(searchJobRequest);
			
			if(Constants.SUCCESS.equalsIgnoreCase(validationResult)) {
				if(authCode != null ) {
					authorizationDetails = validateAuthorization(authCode);
					
					if(authorizationDetails.isValidAuthCode()) {
						if(authorizationDetails.isValidAccess()) {
							userDetails = new UserDetails();
							userDetails.setUserDetailsId(authorizationDetails.getUserDetailsId());
						} else {
							LOGGER.info(logTag + "Unauthorized Access : "+authCode);
							return new ResponseEntity<Response>(getUnAuthorizedAccessRespose(), HttpStatus.UNAUTHORIZED);
						}
					} else {
						LOGGER.info(logTag + "Invalid AuthCode : "+authCode);
						return new ResponseEntity<Response>(getInvalidAuthCodeRespose(authCode), HttpStatus.OK);
					}
				}
				String searchTermWhat = searchJobRequest.getSearchTermWhat();
				if(searchTermWhat != null) {
					searchTermWhat = searchTermWhat.trim().replaceAll(" ", "|");
				}
				List<JobDetails> jobs = jobRepository.getJobs(searchTermWhat, searchTermWhat, searchTermWhat, searchTermWhat, searchTermWhat, searchTermWhat, searchTermWhat);
				
				
				if(jobs != null && !jobs.isEmpty()) {
					webJobSearchDetailsList = new ArrayList<WebJobSearchDetails>();
					
					for(JobDetails details : jobs) {
						WebJobSearchDetails searchDetails = new WebJobSearchDetails();
						searchDetails.setJobCode(details.getJobCode());
						searchDetails.setJobDetailsId(details.getJobDetailsId());
						searchDetails.setJobTitle(details.getJobTitle());
						searchDetails.setCompany(details.getCompany());
						webJobSearchDetailsList.add(searchDetails);
					}
				}
				response = new Response("Jobs", webJobSearchDetailsList);
			} else {
				return getInvalidDataResponseEntity(validationResult);
			}
		} catch (Exception e) {
			String exceptionMessage = logTag + "Exception while building the candidate resume.";
			handleException(LOGGER, logTag, exceptionMessage, e, null);
		}
		LOGGER.info(AppUtil.getEndMethodMessage(logTag));
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}
	
	//=========================================================================
	
	
	//=========================================================================
	
}