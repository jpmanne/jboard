/**
* @author  Jaya Prakash Manne
* @version 1.0
* @since   23-Jan-2020 
*/
package com.ais.jb.controller;

import java.util.Date;
import java.util.List;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ais.jb.common.Constants;
import com.ais.jb.common.URLConstants;
import com.ais.jb.dao.model.RoleDetails;
import com.ais.jb.dao.model.UserDetails;
import com.ais.jb.exception.JBoradException;
import com.ais.jb.model.Response;
import com.ais.jb.repository.UserRepository;
import com.ais.jb.request.model.BuildCandidateResumeRequest;
import com.ais.jb.request.model.SaveCandidateProfileRequest;
import com.ais.jb.util.AppUtil;
import com.ais.jb.util.PasswordEncy;
import com.ais.jb.util.UniversalUniqueCodeGenerator;

@RestController
@RequestMapping(URLConstants.Resume.API_BASE)
public class ResumeController extends BaseController {
	private static final Logger LOGGER = LoggerFactory.getLogger(ResumeController.class);
	
	@Autowired
	UserRepository userRepository;
	
	//=========================================================================
	
	@PostMapping(URLConstants.Resume.BUILD_CANDIDATE_RESUME)
	public ResponseEntity<Response> buildCandidateResume(@Valid @RequestBody BuildCandidateResumeRequest buildCandidateResumeRequest) throws JBoradException {
		String logTag = "buildCandidateResume() :";
		LOGGER.info(AppUtil.getStartMethodMessage(logTag));
		Response response = null;
		
		try {
			
			
			
			
		} catch (Exception e) {
			String exceptionMessage = logTag + "Exception while building the candidate resume.";
			handleException(LOGGER, logTag, exceptionMessage, e, null);
		}
		LOGGER.info(AppUtil.getEndMethodMessage(logTag));
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}
	
	//=========================================================================
	
	@PostMapping(URLConstants.Resume.SAVE_CANDIDATE_PROFILE)
	public ResponseEntity<Response> saveCandidateProfile(@Valid @RequestBody SaveCandidateProfileRequest saveCandidateProfileRequest) throws JBoradException {
		String logTag = "saveCandidateProfile() :";
		LOGGER.info(AppUtil.getStartMethodMessage(logTag));
		Response response = null;
		List<UserDetails> existingUsers = null;
		UserDetails userDetails = null;
		
		try {
			if(saveCandidateProfileRequest != null) {
				existingUsers = userRepository.getUserByEmail(saveCandidateProfileRequest.getEmail());
				
				if(existingUsers != null && existingUsers.size() > 0) {
					// TODO: Need to send a response that the email already exist
					response = new Response("Email already exists.", null);
				} else {
					userDetails = new UserDetails();
					//Need to generate the password and send to the candidate email.
					
					userDetails.setEmail(saveCandidateProfileRequest.getEmail());
					userDetails.setPassword(PasswordEncy.getInstance().encrypt(UniversalUniqueCodeGenerator.getInstance().getAutoGeneratedPassword()));
					userDetails.setFirstName(saveCandidateProfileRequest.getName());
					userDetails.setLastName(saveCandidateProfileRequest.getLastName());
					userDetails.setPhoneNumber(saveCandidateProfileRequest.getPhoneNumber());
					userDetails.setStatus(Constants.ACTIVE);
					userDetails.setCreatedAt(new Date());
					RoleDetails roleDetails = new RoleDetails();
					roleDetails.setRoleId(Constants.CANDIDATE_ROLE);
					userDetails.setRoleDetails(roleDetails);
					userDetails = userRepository.save(userDetails);
					
					if(userDetails.getUserDetailsId() != null) {
						response = new Response("Candidate Profile saved successfully", null);
					}
				}
			} else {
				response = new Response("Invalid Input", null);
			}
		} catch (Exception e) {
			String exceptionMessage = logTag + "Exception while saving the candidate profile.";
			handleException(LOGGER, logTag, exceptionMessage, e, null);
		}
		LOGGER.info(AppUtil.getEndMethodMessage(logTag));
		return new ResponseEntity<Response>(response, HttpStatus.OK);
	}
	
	//=========================================================================
}
